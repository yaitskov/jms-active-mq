<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:mvc="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context-3.0.xsd
							http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
							http://www.springframework.org/schema/jee
						    http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">


	<!-- Use Springs JNDI support to look up JMS Connection Factory and Queue definitions from the
	     container. This means that specific connection details are not embedded in the application
	 -->
	<!--<jee:jndi-lookup id="mqConnectionFactory" jndi-name="java:comp/env/jms/mqConnectionFactory" />-->

    <!--<bean id="XaFactory" class="org.apache.activemq.ActiveMQXAConnectionFactory">-->
        <!--<property name="brokerURL" value="${broker.url}"/>-->
    <!--</bean>-->

    <!--<bean id="mqConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">-->
        <!--<property name="brokerURL" value="tcp://localhost:61616?wireFormat.maxInactivityDuration=120000"/>-->
    <!--</bean>-->

    <bean id="mqConnectionFactory" class="org.apache.activemq.ActiveMQXAConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616?wireFormat.maxInactivityDuration=120000"/>
    </bean>

    <bean id="realConnectionFactory" class="com.atomikos.jms.AtomikosConnectionFactoryBean"
          init-method="init">
        <property name="uniqueResourceName" value="JMS-Producer"/>
        <property name="xaConnectionFactory" ref="mqConnectionFactory"/>
    </bean>

    <!-- connection factory , yu may consider a pool , think about it.. it not always needed -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <property name="targetConnectionFactory" ref="realConnectionFactory"/>
    </bean>

    <!-- Construct Atomikos UserTransactionManager, needed to configure Spring -->
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close">
        <!--  when close is called, should we force transactions to terminate or not? -->
        <property name="forceShutdown" value="true"/>
    </bean>

    <!-- Also use Atomikos UserTransactionImp, needed to configure Spring  -->
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="2222"/>
    </bean>

    <!-- Configure the Spring framework to use JTA transactions from Atomikos -->
    <bean id="transactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosTransactionManager"/>
        <property name="userTransaction" ref="atomikosUserTransaction"/>
    </bean>

    <!-- Configure the JMS template used to send messages -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--<property name="defaultDestinationName" value="${source.queue}"/>-->
        <!--dst is passed by handc-->
        <property name="sessionTransacted" value="true"/>
        <property name="receiveTimeout" value="-1" />
    </bean>




    <!-- data source -->

    <bean id="dataSource"
          class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init"
          destroy-method="close">
        <property name="uniqueResourceName">
            <value>MYDB</value>
        </property>
        <!--xa.atomikos.datasource.classname=com.mysql.jdbc.jdbc2.optional.MysqlXADataSource-->
        <!--xa.atomikos.jdbc.url=jdbc:mysql://localhost:3306/collector?user=root&password=root-->
        <!--xa-atomikos.transaction-timeout=1000-->
        <property name="xaDataSourceClassName">
            <value>com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</value>
        </property>
        <property name="xaProperties">
            <value>URL=jdbc:mysql://localhost:3306/jta?user=root&amp;password=1</value>
        </property>

        <!--<property name="xaProperties">-->
        <!--<props>-->
        <!--<prop key="user">demo</prop>-->
        <!--<prop key="portNumber">8000</prop>-->
        <!--</props>-->
        <!--</property>-->
        <property name="poolSize">
            <value>1</value>
        </property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>



    <!--<jee:jndi-lookup id="brokerLocation" lookup-on-startup="true"-->
                     <!--jndi-name="jms/brokerLocation" resource-ref="true" cache="true" />-->


    <bean id="testQueueOne" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="TOPIC_NAME" />
    </bean>
    <!--<bean id="testQueueOne" class="org.apache.activemq.command.ActiveMQQueue">-->
        <!--<property name="physicalName" value="bla.bla" />-->
    <!--</bean>-->
	<!--<jee:jndi-lookup id="testQueueOne" jndi-name="java:comp/env/jms/testQueueOne" />-->
	<!--<jee:jndi-lookup id="testQueueTwo" jndi-name="java:comp/env/jms/testQueueTwo" />-->

	<!-- DefaultMessageListenerConatiner is the Spring equivalent to an EJB Message Driven Bean.
	     It polls and consumes messages from a JMS queue.  The configuration below is as follows

	     1. connectionFactory - the connection factory definition used to connect to the Message Broker
	        which in our case is Active MQ
	     2. destination - the Queue which the MessageListener container is listening on from incoming messages
	     3. messageListener - the implementation class that will actually handle the incoming messages. The
	        DeafultMesssageListener takes messages from the queue and passes them to the message listener for
	        processing. We've defined our message listener above (testMessageListener)
	     4. concurrentConsumers - this is the number of threads that the DeafultMesaegListenerContainer will
	        spawn to handle incoming messages. The default is 1 but in our application we'll have 2 separate
	        threads processing incoming messages.
	  -->
	<!--<bean id="poiMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
    	<!--<property name="connectionFactory" ref ="mqConnectionFactory" />-->
    	<!--<property name="destination" ref ="testQueueOne"/>-->
		<!--<property name="messageListener" ref ="testMessageListener"/>-->
		<!--<property name="concurrentConsumers" value="2" />-->
    <!--</bean>-->



	<!-- JMSTemplate is a Spring template that allows us to communicate with
		 a message broker via JMS. JMSTemplate takes care of boiler plate code such as exception handling
		 and resource management such as connection pooling. This allows us concentrate on solving the 'business'
		 problem. We supply the JMS template with the connection factory mentioned above
     -->
	<!--<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">-->
		<!--<property name="connectionFactory" ref="mqConnectionFactory" />-->
        <!--&lt;!&ndash;<property name="defaultDestinationName" value="bla.bal" />&ndash;&gt;-->
	<!--</bean>-->

    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
    </bean>

    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
    </bean>

    <bean id="outboundExceptionAdapter"
          class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver">
    </bean>

    <mvc:annotation-config/>
    <context:annotation-config></context:annotation-config>
    <context:component-scan base-package="com.blog.spring.jms" />

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- enable configuration with annotations, like @PostConstruct -->



</beans>
